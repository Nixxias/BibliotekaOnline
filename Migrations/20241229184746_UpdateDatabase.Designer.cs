// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TEST.Context;

#nullable disable

namespace TEST.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241229184746_UpdateDatabase")]
    partial class UpdateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TEST.Models.Autor", b =>
                {
                    b.Property<int>("IdAutora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_autora");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAutora"));

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_urodzenia");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imie");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwisko");

                    b.HasKey("IdAutora");

                    b.ToTable("autor");
                });

            modelBuilder.Entity("TEST.Models.Czytelnicy", b =>
                {
                    b.Property<int>("IdKlienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_klienta");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdKlienta"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adres");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("haslo");

                    b.Property<int>("IdOddzial")
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imie");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("miasto");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwisko");

                    b.Property<string>("NrTel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nr_tel");

                    b.Property<string>("NumerPocztowy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numer_pocztowy");

                    b.HasKey("IdKlienta");

                    b.HasIndex("IdOddzial");

                    b.ToTable("czytelnicy");
                });

            modelBuilder.Entity("TEST.Models.Gatunek", b =>
                {
                    b.Property<int>("IdGatunku")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_gatunku");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGatunku"));

                    b.Property<string>("NazwaGatunku")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwa_gatunku");

                    b.HasKey("IdGatunku");

                    b.ToTable("gatunek");
                });

            modelBuilder.Entity("TEST.Models.Kopie", b =>
                {
                    b.Property<int>("IdKopii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_kopii");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdKopii"));

                    b.Property<char>("CzyDostepna")
                        .HasColumnType("character(1)")
                        .HasColumnName("czy_dostepna");

                    b.Property<int>("IdKsiazki")
                        .HasColumnType("integer")
                        .HasColumnName("id_ksiazki");

                    b.Property<int?>("KsiazkaIdKsiazki")
                        .HasColumnType("integer");

                    b.HasKey("IdKopii");

                    b.HasIndex("KsiazkaIdKsiazki");

                    b.ToTable("kopie");
                });

            modelBuilder.Entity("TEST.Models.Ksiazka", b =>
                {
                    b.Property<int>("IdKsiazki")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ksiazki");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdKsiazki"));

                    b.Property<int>("IdAutora")
                        .HasColumnType("integer")
                        .HasColumnName("id_autora");

                    b.Property<int>("IdGatunku")
                        .HasColumnType("integer")
                        .HasColumnName("id_gatunku");

                    b.Property<int>("IdOddzial")
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    b.Property<int>("IdRegal")
                        .HasColumnType("integer")
                        .HasColumnName("id_regal");

                    b.Property<int>("IdWydawnictwa")
                        .HasColumnType("integer")
                        .HasColumnName("id_wydawnictwa");

                    b.Property<int>("LiczbaStron")
                        .HasColumnType("integer")
                        .HasColumnName("liczba_stron");

                    b.Property<int>("RokWydania")
                        .HasColumnType("integer")
                        .HasColumnName("rok_wydania");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tytul");

                    b.HasKey("IdKsiazki");

                    b.HasIndex("IdAutora");

                    b.HasIndex("IdGatunku");

                    b.HasIndex("IdOddzial");

                    b.HasIndex("IdRegal");

                    b.HasIndex("IdWydawnictwa");

                    b.ToTable("ksiazka");
                });

            modelBuilder.Entity("TEST.Models.Oddzial", b =>
                {
                    b.Property<int>("IdOddzial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOddzial"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adres");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kod_pocztowy");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("miasto");

                    b.HasKey("IdOddzial");

                    b.ToTable("oddzial");
                });

            modelBuilder.Entity("TEST.Models.Pracownicy", b =>
                {
                    b.Property<int>("IdPracownicy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pracownicy");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPracownicy"));

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("haslo");

                    b.Property<int?>("IdOddzial")
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imie");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwisko");

                    b.Property<string>("Stanowisko")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stanowisko");

                    b.HasKey("IdPracownicy");

                    b.HasIndex("IdOddzial");

                    b.ToTable("pracownicy");
                });

            modelBuilder.Entity("TEST.Models.Regal", b =>
                {
                    b.Property<int>("IdRegal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_regal");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRegal"));

                    b.Property<int>("IdOddzial")
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    b.Property<int>("NrRegalu")
                        .HasColumnType("integer")
                        .HasColumnName("nr_regalu");

                    b.Property<int>("Pietro")
                        .HasColumnType("integer")
                        .HasColumnName("pietro");

                    b.HasKey("IdRegal");

                    b.HasIndex("IdOddzial");

                    b.ToTable("regal");
                });

            modelBuilder.Entity("TEST.Models.Wydawnictwo", b =>
                {
                    b.Property<int>("IdWydawnictwa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wydawnictwa");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWydawnictwa"));

                    b.Property<DateTime>("DataZalozenia")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_zalozenia");

                    b.Property<string>("NazwaWydawnictwa")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwa_wydawnictwa");

                    b.Property<string>("Siedziba")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("siedziba");

                    b.HasKey("IdWydawnictwa");

                    b.ToTable("wydawnictwo");
                });

            modelBuilder.Entity("TEST.Models.Wypozyczenia", b =>
                {
                    b.Property<int>("IdWypozyczenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_wypozyczenia");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWypozyczenia"));

                    b.Property<int?>("CzytelnicyIdKlienta")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataWypozyczenia")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_wypozyczenia");

                    b.Property<DateTime?>("DataZwrotu")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_zwrotu");

                    b.Property<int>("IdKlienta")
                        .HasColumnType("integer")
                        .HasColumnName("id_klienta");

                    b.Property<int>("IdKopii")
                        .HasColumnType("integer")
                        .HasColumnName("id_kopii");

                    b.Property<int>("IdOddzial")
                        .HasColumnType("integer")
                        .HasColumnName("id_oddzial");

                    b.Property<int?>("KopieIdKopii")
                        .HasColumnType("integer");

                    b.HasKey("IdWypozyczenia");

                    b.HasIndex("CzytelnicyIdKlienta");

                    b.HasIndex("IdOddzial");

                    b.HasIndex("KopieIdKopii");

                    b.ToTable("wypozyczenia");
                });

            modelBuilder.Entity("TEST.Models.Czytelnicy", b =>
                {
                    b.HasOne("TEST.Models.Oddzial", "Oddzial")
                        .WithMany()
                        .HasForeignKey("IdOddzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oddzial");
                });

            modelBuilder.Entity("TEST.Models.Kopie", b =>
                {
                    b.HasOne("TEST.Models.Ksiazka", "Ksiazka")
                        .WithMany("Kopie")
                        .HasForeignKey("KsiazkaIdKsiazki");

                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("TEST.Models.Ksiazka", b =>
                {
                    b.HasOne("TEST.Models.Autor", "Autor")
                        .WithMany("Ksiazka")
                        .HasForeignKey("IdAutora")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TEST.Models.Gatunek", "Gatunek")
                        .WithMany("Ksiazka")
                        .HasForeignKey("IdGatunku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TEST.Models.Oddzial", "Oddzial")
                        .WithMany()
                        .HasForeignKey("IdOddzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TEST.Models.Regal", "Regal")
                        .WithMany("Ksiazka")
                        .HasForeignKey("IdRegal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TEST.Models.Wydawnictwo", "Wydawnictwo")
                        .WithMany("Ksiazka")
                        .HasForeignKey("IdWydawnictwa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Gatunek");

                    b.Navigation("Oddzial");

                    b.Navigation("Regal");

                    b.Navigation("Wydawnictwo");
                });

            modelBuilder.Entity("TEST.Models.Pracownicy", b =>
                {
                    b.HasOne("TEST.Models.Oddzial", "Oddzial")
                        .WithMany()
                        .HasForeignKey("IdOddzial");

                    b.Navigation("Oddzial");
                });

            modelBuilder.Entity("TEST.Models.Regal", b =>
                {
                    b.HasOne("TEST.Models.Oddzial", "Oddzial")
                        .WithMany("Regal")
                        .HasForeignKey("IdOddzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oddzial");
                });

            modelBuilder.Entity("TEST.Models.Wypozyczenia", b =>
                {
                    b.HasOne("TEST.Models.Czytelnicy", "Czytelnicy")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("CzytelnicyIdKlienta");

                    b.HasOne("TEST.Models.Oddzial", "Oddzial")
                        .WithMany()
                        .HasForeignKey("IdOddzial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TEST.Models.Kopie", "Kopie")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("KopieIdKopii");

                    b.Navigation("Czytelnicy");

                    b.Navigation("Kopie");

                    b.Navigation("Oddzial");
                });

            modelBuilder.Entity("TEST.Models.Autor", b =>
                {
                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("TEST.Models.Czytelnicy", b =>
                {
                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("TEST.Models.Gatunek", b =>
                {
                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("TEST.Models.Kopie", b =>
                {
                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("TEST.Models.Ksiazka", b =>
                {
                    b.Navigation("Kopie");
                });

            modelBuilder.Entity("TEST.Models.Oddzial", b =>
                {
                    b.Navigation("Regal");
                });

            modelBuilder.Entity("TEST.Models.Regal", b =>
                {
                    b.Navigation("Ksiazka");
                });

            modelBuilder.Entity("TEST.Models.Wydawnictwo", b =>
                {
                    b.Navigation("Ksiazka");
                });
#pragma warning restore 612, 618
        }
    }
}
